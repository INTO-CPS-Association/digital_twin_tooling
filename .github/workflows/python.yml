name: DigitalTwinPlatform

on: [ workflow_dispatch, push, pull_request ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest  ] #, macos-latest
    steps:
#      - name: Switch windows docker to linux enigne
#        if: matrix.os == 'windows-latest'
#        shell: powershell
#        run: |
#          Uninstall-Package -Name docker -ProviderName DockerMSFTProvider
#          Install-Module DockerProvider -Force
#          Install-Package Docker -ProviderName DockerProvider -RequiredVersion preview -Force
#          [Environment]::SetEnvironmentVariable("LCOW_SUPPORTED", "1", "Machine")
#          Restart-Service docker
#      - uses: getong/rabbitmq-action@v1.2
#        if: matrix.os == 'windows-latest'
#        with:
#          rabbitmq version: '3.8.2-management-alpine'
#          host port: 5672
#          rabbitmq user: 'guest'
#          rabbitmq password: 'guest'
#          rabbitmq vhost: 'vhost_name'

#      - name: Cache Chocolatey Dependencies
#        if: matrix.os == 'windows-latest'
#        uses: actions/cache@v1
#        with:
#          path: C:\ProgramData\chocolatey\lib
#          key: choco-cache-${{ hashFiles('**/dependencies.config') }}
#          restore-keys: |
#            choco-cache-
      - name: Cache Chocolatey Dependencies
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v1
        with:
          path: C:\ProgramData\Chocolatey\
          key: ${{ runner.OS }}-choco-cache-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.OS }}-choco-cache-

      - name: Choco help
        if: matrix.os == 'windows-latest'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install rabbitmq

      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pip install -e .[dev,test]

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

#      - name: Install docker # Taken from https://github.com/actions/virtual-environments/issues/1143#issuecomment-652264388
#        if: matrix.os == 'macOS-latest'
#        run: |
#          mkdir -p ~/.docker/machine/cache
#          curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso
#          brew install docker docker-machine
#          docker-machine create --driver virtualbox default
#          docker-machine env default
      - uses: docker-practice/actions-setup-docker@master
        if: matrix.os == 'macOS-latest'

      - name: Run test suite
        run: |
          cd tests/digital_twin_tooling
          python -m unittest discover -v -s .

      - name: Build package
        if: ${{ always() }}
        run: |
          python setup.py egg_info -b `python -c 'import datetime; print("pre"+datetime.datetime.now().strftime("%Y%m%d%H%M%S"))'`  build bdist_wheel

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: logs
          path: ./tests/digital_twin_tooling/jobs/**/*.*

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: digital-twin-tooling
          path: ./**/dist/digital_twin_tooling-*.whl

